CREATE OR REPLACE FUNCTION get_customer_balance(p_customer_id NUMBER, p_effective_date TIMESTAMP) 
RETURN NUMBER
 
IS

       --OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       --THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       --   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       --   2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
       --   3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
       --   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED

  v_rentfees NUMBER(5,2); --FEES PAID TO RENT THE VIDEOS INITIALLY
  v_overfees NUMBER(10);      --LATE FEES FOR PRIOR RENTALS
  v_payments NUMBER(5,2);
BEGIN --SUM OF PAYMENTS MADE PREVIOUSLY

  SELECT NVL(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film, inventory, rental
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

  SELECT NVL(SUM(CASE WHEN (TO_DATE(rental.return_date) - TO_DATE(rental.rental_date)) > film.rental_duration THEN 
        ((TO_DATE(rental.return_date) - TO_DATE(rental.rental_date)) - film.rental_duration) ELSE 0 END),0) INTO v_overfees
    FROM rental, inventory, film
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;


  SELECT NVL(SUM(payment.amount),0) INTO v_payments
    FROM payment

    WHERE payment.payment_date <= p_effective_date
    AND payment.customer_id = p_customer_id;

  RETURN v_rentfees + v_overfees - v_payments;
END; 



CREATE OR REPLACE FUNCTION inventory_held_by_customer(p_inventory_id NUMBER) 
RETURN NUMBER
IS
  v_customer_id NUMBER(10);
BEGIN

  SELECT customer_id INTO v_customer_id
  FROM rental
  WHERE return_date IS NULL
  AND inventory_id = p_inventory_id;
RETURN v_customer_id;

EXCEPTION
WHEN NO_DATA_FOUND THEN RETURN NULL;
END; 

CREATE OR REPLACE FUNCTION inventory_in_stock (p_inventory_id NUMBER) 
RETURN BOOLEAN
IS
v_rentals NUMBER;
v_out     NUMBER;
BEGIN

    --AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
    --FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED

    SELECT COUNT(*) INTO v_rentals
    FROM rental
    WHERE inventory_id = p_inventory_id;

    IF v_rentals = 0 THEN
      RETURN TRUE;
    END IF;

    SELECT COUNT(rental_id) INTO v_out
    FROM inventory JOIN rental ON (inventory.inventory_id = rental.inventory_id)
    WHERE inventory.inventory_id = p_inventory_id
    AND rental.return_date IS NULL;

    IF v_out > 0 THEN
      RETURN FALSE;
    ELSE
      RETURN TRUE;
    END IF;
END; 




